buildscript {
    dependencies {
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
        classpath 'net.researchgate:gradle-release:2.8.1'

    }
    repositories {
        mavenCentral()
        jcenter()
    }
}

apply plugin: 'idea'

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'checkstyle'
    apply plugin: 'maven-publish'
    apply plugin: 'maven-publish-auth'
    apply plugin: "maven"
    apply plugin: 'signing'
    apply plugin: 'net.researchgate.release'
    apply plugin: 'jacoco'

    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
            mavenContent {
                snapshotsOnly()
            }
        }
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    checkstyle {
        configProperties('rootDir': rootDir)
        toolVersion = '8.18'
    }

    group = 'com.hazelcast.jet.contrib'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    ext {
        jetVersion = '4.1'
        hazelcastVersion = '4.0.1'
    }

    dependencies {
        compile group: 'com.hazelcast.jet', name: 'hazelcast-jet', version: jetVersion
        compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
        testCompile "com.hazelcast.jet:hazelcast-jet-core:" + jetVersion + ":tests"
        testCompile "com.hazelcast:hazelcast:" + hazelcastVersion + ":tests"
        testCompile "javax.cache:cache-api:1.1.0"
        testCompile 'log4j:log4j:1.2.17'
        testCompile 'junit:junit:4.11'
        testCompile 'org.awaitility:awaitility:3.1.6'
    }

    test {
        ignoreFailures = project.findProperty('testFailureIgnore') ? project.testFailureIgnore : false

        systemProperty "hazelcast.phone.home.enabled", "false"
        systemProperty "hazelcast.logging.type", "log4j"

        minHeapSize = "1g"
        maxHeapSize = "1g"
        useJUnit {
            excludeCategories 'com.hazelcast.test.annotation.NightlyTest'
        }

    }

    task testIntegration(type: Test) {
        ignoreFailures = project.findProperty('testFailureIgnore') ? project.testFailureIgnore : false
        useJUnit {
            includeCategories 'com.hazelcast.test.annotation.NightlyTest'
        }
    }

    task testJar(type: Jar) {
        from sourceSets.test.output.classesDirs
        archiveClassifier = 'tests'
    }

    configurations {
        tests
        published.extendsFrom tests, archives
    }

    artifacts {
        tests testJar
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier = 'sources'
    }

    task javadocJar(type: Jar) {
        from javadoc
        archiveClassifier = 'javadoc'
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                artifact testJar
                pom {
                    name = project.name
                    description = project.description
                    url = 'https://github.com/hazelcast/hazelcast-jet-contrib'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'eminn'
                            name = 'Emin Demirci'
                            email = 'emin@hazelcast.com'
                        }
                        developer {
                            id = 'cangencer'
                            name = 'Can Gencer'
                            email = 'can@hazelcast.com'
                        }
                        developer {
                            id = 'gurbuzali'
                            name = 'Ali Gurbuz'
                            email = 'ali@hazelcast.com'
                        }
                        developer {
                            id = 'jbartok'
                            name = 'Jozsef Bartok'
                            email = 'jozsi@hazelcast.com'
                        }
                        developer {
                            id = 'jerrinot'
                            name = 'Jaromir Hamala'
                            email = 'jaromir@hazelcast.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/hazelcast/hazelcast-jet-contrib.git'
                        developerConnection = 'scm:git:ssh://git@github.com:hazelcast/hazelcast-jet-contrib.git'
                        url = 'https://github.com/hazelcast/hazelcast-jet-contrib'
                    }
                }
            }
        }
        repositories {
            maven {
                def snapshotsRepoName = "snapshot-repository"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
                def releasesRepoName = "release-repository"
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                name = version.endsWith('SNAPSHOT') ? snapshotsRepoName : releasesRepoName
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            }
            mavenLocal()
        }
    }

    javadoc {
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    signing {
        sign publishing.publications.mavenJava
    }

    tasks.withType(Sign) {
        onlyIf {
            !it.project.version.endsWith('SNAPSHOT')
        }
    }

    tasks.withType(Test) {
        maxParallelForks = 1
    }


    build.dependsOn javadoc
    test.finalizedBy jacocoTestReport

    release {
        failOnCommitNeeded = true
        failOnPublishNeeded = true
        failOnSnapshotDependencies = true
        failOnUnversionedFiles = true
        failOnUpdateNeeded = true
        revertOnFail = true
        preCommitText = ''
        preTagCommitMessage = ''
        tagCommitMessage = ''
        newVersionCommitMessage = ''
        tagTemplate = '${name}-${version}'
        pushReleaseVersionBranch = false
        scmAdapters = [
                net.researchgate.release.GitAdapter
        ]

        git {
            requireBranch = 'master'
            pushToRemote = 'origin'
            pushToBranchPrefix = ''
            commitVersionFileOnly = false
            signTag = false
        }
    }

    afterReleaseBuild.dependsOn publish

}

